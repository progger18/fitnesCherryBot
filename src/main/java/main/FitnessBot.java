package main;

import lombok.extern.slf4j.Slf4j;
import main.config.BotConfig;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.List;

@Slf4j
public class FitnessBot extends TelegramLongPollingBot {
    @Override
    public String getBotUsername() {
        return BotConfig.getBotUsername();
    }

    @Override
    public String getBotToken() {
        return BotConfig.getBotToken();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();

            switch (messageText) {
                case "/start":
                    sendStartMessage(chatId);
                    break;
                case "üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ò–ú–¢":
                    sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–≥ –∏ —Ä–æ—Å—Ç –≤ —Å–º —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70 175)");
                    break;
                case "üí™ –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫":
                    sendTrainingPlan(chatId);
                    break;
                case "üçé –ü–∏—Ç–∞–Ω–∏–µ":
                    sendNutritionInfo(chatId);
                    break;
                case "üí≠ –ú–æ—Ç–∏–≤–∞—Ü–∏—è":
                    sendMotivationalQuote(chatId);
                    break;
                default:
                    if (messageText.matches("\\d+\\s+\\d+")) {
                        calculateBMI(chatId, messageText);
                    } else {
                        sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏");
                    }
            }
        }
    }

    private void sendStartMessage(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Fitness Assistant Bot! üèãÔ∏è‚Äç‚ôÇÔ∏è\n\n" +
                "–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n" +
                "üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ò–ú–¢\n" +
                "üí™ –°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n" +
                "üçé –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è\n" +
                "üí≠ –ü–æ–¥–Ω—è—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é\n\n" +
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:");

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();
        KeyboardRow row1 = new KeyboardRow();
        row1.add("üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ò–ú–¢");
        row1.add("üí™ –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫");
        KeyboardRow row2 = new KeyboardRow();
        row2.add("üçé –ü–∏—Ç–∞–Ω–∏–µ");
        row2.add("üí≠ –ú–æ—Ç–∏–≤–∞—Ü–∏—è");
        keyboard.add(row1);
        keyboard.add(row2);
        keyboardMarkup.setKeyboard(keyboard);
        keyboardMarkup.setResizeKeyboard(true);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("Error sending start message", e);
        }
    }

    private void calculateBMI(long chatId, String messageText) {
        String[] parts = messageText.split("\\s+");
        double weight = Double.parseDouble(parts[0]);
        double height = Double.parseDouble(parts[1]) / 100; // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–º –≤ –º–µ—Ç—Ä—ã

        double bmi = weight / (height * height);
        String category;
        if (bmi < 18.5) {
            category = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –≤–µ—Å";
        } else if (bmi < 25) {
            category = "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–µ—Å";
        } else if (bmi < 30) {
            category = "–ò–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–µ—Å";
        } else {
            category = "–û–∂–∏—Ä–µ–Ω–∏–µ";
        }

        String response = String.format("–í–∞—à –ò–ú–¢: %.1f\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n\n", bmi, category);
        response += "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n";
        if (bmi < 18.5) {
            response += "‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å —Ä–∞—Ü–∏–æ–Ω–∞\n‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Å–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n‚Ä¢ –ü–∏—Ç–∞–π—Ç–µ—Å—å —á–∞—â–µ";
        } else if (bmi < 25) {
            response += "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º\n‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ —Ç—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å\n‚Ä¢ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–∏—Ç–∞–π—Ç–µ—Å—å";
        } else {
            response += "‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π\n‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∫–∞—Ä–¥–∏–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö —É–≥–ª–µ–≤–æ–¥–æ–≤";
        }

        sendMessage(chatId, response);
    }

    private void sendTrainingPlan(long chatId) {
        String message = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:\n\n" +
                "1Ô∏è‚É£ –ù–∞—á–∏–Ω–∞—é—â–∏–π\n" +
                "2Ô∏è‚É£ –°—Ä–µ–¥–Ω–∏–π\n" +
                "3Ô∏è‚É£ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π\n\n" +
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫";
        sendMessage(chatId, message);
    }

    private void sendNutritionInfo(long chatId) {
        String message = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n\n" +
                "ü•© –ë–µ–ª–∫–∏:\n" +
                "‚Ä¢ –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞\n" +
                "‚Ä¢ –†—ã–±–∞ (–ª–æ—Å–æ—Å—å, —Ç—É–Ω–µ—Ü)\n" +
                "‚Ä¢ –Ø–π—Ü–∞\n" +
                "‚Ä¢ –¢–≤–æ—Ä–æ–≥\n\n" +
                "üåæ –£–≥–ª–µ–≤–æ–¥—ã:\n" +
                "‚Ä¢ –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π —Ä–∏—Å\n" +
                "‚Ä¢ –û–≤—Å—è–Ω–∫–∞\n" +
                "‚Ä¢ –ö–∏–Ω–æ–∞\n" +
                "‚Ä¢ –°–ª–∞–¥–∫–∏–π –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å\n\n" +
                "ü•ë –ñ–∏—Ä—ã:\n" +
                "‚Ä¢ –ê–≤–æ–∫–∞–¥–æ\n" +
                "‚Ä¢ –û—Ä–µ—Ö–∏\n" +
                "‚Ä¢ –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ\n" +
                "‚Ä¢ –ñ–∏—Ä–Ω–∞—è —Ä—ã–±–∞\n\n" +
                "ü•¨ –û–≤–æ—â–∏:\n" +
                "‚Ä¢ –ë—Ä–æ–∫–∫–æ–ª–∏\n" +
                "‚Ä¢ –®–ø–∏–Ω–∞—Ç\n" +
                "‚Ä¢ –ë–æ–ª–≥–∞—Ä—Å–∫–∏–π –ø–µ—Ä–µ—Ü\n" +
                "‚Ä¢ –¶—É–∫–∏–Ω–∏";
        sendMessage(chatId, message);
    }

    private void sendMotivationalQuote(long chatId) {
        String[] quotes = {
            "–¢–≤–æ–π –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–µ–ª - —ç—Ç–æ —Ç—ã —Å–∞–º.",
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –ª—É—á—à–µ.",
            "–°–∏–ª–∞ –Ω–µ –≤ –º—ã—à—Ü–∞—Ö, –∞ –≤ —Å–∏–ª–µ –≤–æ–ª–∏.",
            "–¢—è–∂–µ–ª–æ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ - –ª–µ–≥–∫–æ –≤ –∂–∏–∑–Ω–∏.",
            "–ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è, –∫–æ–≥–¥–∞ —É—Å—Ç–∞–ª. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª."
        };
        String randomQuote = quotes[(int) (Math.random() * quotes.length)];
        sendMessage(chatId, "üí™ " + randomQuote);
    }

    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("Error sending message", e);
        }
    }
} 